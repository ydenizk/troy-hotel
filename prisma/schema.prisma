// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  isAdmin        Boolean       @default(false)
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  accounts       Account[]
  sessions       Session[]
  reservations   Reservation[]

  @@map("users")
}

model Listing {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  imageSrc     String[]
  createdAt    DateTime      @default(now())
  rommsqm2     Int
  price        Int
  reservations Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  note       String?
  phone      String
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Newsletter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String?
  createdAt DateTime @default(now())
}
